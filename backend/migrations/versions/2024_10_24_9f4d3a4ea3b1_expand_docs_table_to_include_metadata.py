"""Expand docs table to include metadata

Revision ID: 9f4d3a4ea3b1
Revises:
Create Date: 2024-10-24 12:52:17.499322

"""

from typing import Sequence, Union

import pgvector
import sqlalchemy as sa
from alembic import op
from app.config import (
    PGVECTOR_DISTANCE,
    PGVECTOR_EF_CONSTRUCTION,
    PGVECTOR_M,
    PGVECTOR_VECTOR_SIZE,
)
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "9f4d3a4ea3b1"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm;")
    op.create_table(
        "documents",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("file_id", sa.String(length=36), nullable=False),
        sa.Column("file_name", sa.String(length=150), nullable=False),
        sa.Column("page_number", sa.Integer(), nullable=False),
        sa.Column("content_text", sa.Text(), nullable=False),
        sa.Column(
            "content_embedding",
            pgvector.sqlalchemy.Vector(dim=PGVECTOR_VECTOR_SIZE),
            nullable=False,
        ),
        sa.Column("created_datetime_utc", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_datetime_utc", sa.DateTime(timezone=True), nullable=False),
        sa.Column("countries", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "organizations", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("regions", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("drive_link", sa.Text(), nullable=True),
        sa.Column("year", sa.Integer(), nullable=True),
        sa.Column("date_added", sa.DateTime(timezone=True), nullable=True),
        sa.Column("document_id", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_documents_embedding",
        "documents",
        ["content_embedding"],
        unique=False,
        postgresql_using="hnsw",
        postgresql_with={"M": PGVECTOR_M, "ef_construction": PGVECTOR_EF_CONSTRUCTION},
        postgresql_ops={"content_embedding": PGVECTOR_DISTANCE},
    )
    op.create_index(
        "idx_documents_fulltext",
        "documents",
        ["content_text"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"content_text": "gin_trgm_ops"},
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "idx_documents_fulltext",
        table_name="documents",
        postgresql_using="gin",
        postgresql_ops={"content_text": "gin_trgm_ops"},
    )
    op.drop_index(
        "idx_documents_embedding",
        table_name="documents",
        postgresql_using="hnsw",
        postgresql_with={"M": "16", "ef_construction": "64"},
        postgresql_ops={"content_embedding": "vector_cosine_ops"},
    )
    op.drop_table("documents")
    op.execute("DROP EXTENSION IF EXISTS vector;")
    op.execute("DROP EXTENSION IF EXISTS pg_trgm;")
    # ### end Alembic commands ###
